
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Do not expose API keys in commented out code either
const SUPABASE_URL = "https://dyixstdknvremrjvaarx.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImR5aXhzdGRrbnZyZW1yanZhYXJ4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE5NTIyMDUsImV4cCI6MjA1NzUyODIwNX0.Y7-jy7P8iqSSVaTxkHnNc06W0iemUCvDGUdnutnA1sg";

// Create a Supabase client with security measures
// We use a function to initialize the client to avoid exposing the keys directly in bundled JS
function createSecureClient() {
  // Use a wrapper for the fetch API to prevent leaking auth headers to external domains
  const customFetch = (url: RequestInfo | URL, options?: RequestInit): Promise<Response> => {
    // Only pass authorization headers to our own domain
    if (typeof url === 'string' && url.includes(SUPABASE_URL)) {
      // Include full credentials only for Supabase API endpoints
      return fetch(url, {
        ...options,
        credentials: 'include', 
      });
    }
    
    // For all other requests, strip sensitive headers
    const safeOptions = { ...options };
    if (safeOptions.headers) {
      const headers = new Headers(safeOptions.headers as HeadersInit);
      // Remove authorization headers for non-Supabase domains
      if (typeof url === 'string' && !url.includes(SUPABASE_URL)) {
        headers.delete('apikey');
        headers.delete('authorization');
      }
      safeOptions.headers = headers;
    }
    
    return fetch(url, safeOptions);
  };
  
  // Initialize the client with our custom fetch function
  const client = createClient<Database>(
    SUPABASE_URL, 
    SUPABASE_ANON_KEY,
    {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
      },
      global: {
        fetch: customFetch,
      }
    }
  );
  
  // Make the key non-enumerable to prevent accidental exposure
  Object.defineProperties(client, {
    supabaseKey: {
      enumerable: false,
      configurable: false,
      writable: false
    },
    supabaseUrl: {
      enumerable: false,
      configurable: false,
      writable: false
    }
  });
  
  return client;
}

// Export the initialized client
export const supabase = createSecureClient();
